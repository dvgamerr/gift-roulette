---
import WheelSection from './WheelSection.astro';
import FriendsList from './FriendsList.astro';
import HistoryList from './HistoryList.astro';
---
<div class="flex flex-col md:flex-row w-full">
  <WheelSection />
  <div class="flex-1 bg-white p-5 border-t border-gray-300 md:border-t-0 md:border-l md:border-gray-300 overflow-y-auto">
    <FriendsList />
    <HistoryList />
  </div>
</div>

<style>
.wheel-segment {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  clip-path: polygon(50% 50%, 50% 0, 100% 50%);
  transform-origin: 50% 50%;
  display: flex;
  justify-content: center;
  align-items: flex-start;
  padding-top: 10px;
  box-sizing: border-box;
  font-size: 14px;
  font-weight: bold;
  text-align: center;
  user-select: none;
}
.odd\\:bg-gray-300:nth-child(odd){background-color:#d1d5db;}
.even\\:bg-gray-200:nth-child(even){background-color:#e5e7eb;}
@keyframes spin {
  from {transform: rotate(0deg);}
  to {transform: rotate(360deg);}
}
.spinning {
  animation: spin 2s steps(100);
}
</style>

<script>
  const friends = [];
  const giftHistory = [];
  let spinning = false;

  function updateWheel() {
    const wheel = document.getElementById("wheel");
    wheel.innerHTML = "";
    const numSegments = friends.length;
    if (numSegments === 0) return;
    const angleSlice = 360 / numSegments;
    friends.forEach((friend, index) => {
      const segment = document.createElement("div");
      segment.classList.add("wheel-segment", "odd:bg-gray-300", "even:bg-gray-200");
      segment.style.transform = `rotate(${index * angleSlice}deg)`;
      segment.style.clipPath = `polygon(50% 50%, 50% 0, ${50 + 50 * Math.tan(((angleSlice / 2) * Math.PI) / 180)}% 0)`;
      segment.textContent = friend;
      wheel.appendChild(segment);
    });
  }

  function addFriend() {
    const newFriendInput = document.getElementById("newFriend");
    const friendName = newFriendInput.value.trim();
    if (friendName && !friends.includes(friendName)) {
      friends.push(friendName);
      newFriendInput.value = "";
      updateFriendsList();
      updateWheel();
    }
  }

  function removeFriend(index) {
    friends.splice(index, 1);
    updateFriendsList();
    updateWheel();
  }

  function updateFriendsList() {
    const friendsList = document.getElementById("friendsList");
    friendsList.innerHTML = "";
    friends.forEach((friend, index) => {
      const listItem = document.createElement("li");
      listItem.classList.add("flex", "justify-between", "items-center", "py-1", "border-b", "border-gray-200", "last:border-b-0");
      listItem.textContent = friend;
      const removeButton = document.createElement("button");
      removeButton.classList.add("text-red-600", "text-xs", "ml-2");
      removeButton.textContent = "x";
      removeButton.onclick = () => removeFriend(index);
      listItem.appendChild(removeButton);
      friendsList.appendChild(listItem);
    });
  }

  function spinWheel() {
    if (spinning || friends.length < 2) return;
    spinning = true;
    const wheel = document.getElementById("wheel");
    wheel.classList.add("spinning");
    const rand = Math.floor(Math.random() * friends.length);
    const deg = 360 * 5 + rand * (360 / friends.length);
    wheel.style.transform = `rotate(${deg}deg)`;

    setTimeout(() => {
      wheel.classList.remove("spinning");
      wheel.style.transform = `rotate(${deg % 360}deg)`;
      showWinner(rand);
      spinning = false;
    }, 2000);
  }

  function showWinner(winnerIndex) {
    const winnerName = friends[winnerIndex];
    displayWinnerName(winnerName);
    animateNameDeletion(winnerIndex);
  }

  function displayWinnerName(name) {
    const nameDisplay = document.getElementById("nameDisplay");
    const pastelColor = getRandomPastelColor();
    nameDisplay.style.backgroundColor = pastelColor;
    nameDisplay.textContent = name;
    nameDisplay.classList.add("opacity-100");
    setTimeout(() => {
      nameDisplay.classList.remove("opacity-100");
    }, 1500);
  }

  function animateNameDeletion(winnerIndex) {
    if (friends.length <= 1) return;

    const winnerName = friends[winnerIndex];
    const remainingFriends = [...friends];
    remainingFriends.splice(winnerIndex, 1);
    const gifterIndex = Math.floor(Math.random() * remainingFriends.length);
    const gifterName = remainingFriends[gifterIndex];

    giftHistory.push({ gifter: gifterName, receiver: winnerName });
    updateGiftHistory();

    friends.splice(winnerIndex, 1);
    updateFriendsList();
    updateWheel();

    setTimeout(() => {
      const nameDisplay = document.getElementById("nameDisplay");
      nameDisplay.textContent = "";
      nameDisplay.style.backgroundColor = "";
    }, 2000);
  }

  function updateGiftHistory() {
    const historyList = document.getElementById("giftHistory");
    historyList.innerHTML = "";
    giftHistory.forEach((item) => {
      const historyItem = document.createElement("li");
      historyItem.classList.add("py-1", "border-b", "border-gray-200", "last:border-b-0");
      historyItem.textContent = `${item.gifter} gave to ${item.receiver}`;
      historyList.appendChild(historyItem);
    });
  }

  function getRandomPastelColor() {
    const h = 360 * Math.random();
    const s = 25 + 70 * Math.random() + "%";
    const l = 75 + 10 * Math.random() + "%";
    return `hsl(${h},${s},${l})`;
  }

  document.addEventListener('DOMContentLoaded', () => {
    document.getElementById("spinButton").addEventListener("click", spinWheel);
    document.getElementById("addFriendButton").addEventListener("click", addFriend);

    document.getElementById("newFriend").addEventListener("keydown", function (event) {
      if (event.key === "Enter") addFriend();
    });

    updateFriendsList();
    updateWheel();
  });
</script>
