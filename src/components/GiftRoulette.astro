---
import WheelSection from './WheelSection.astro';
import FriendsList from './FriendsList.astro';
import HistoryList from './HistoryList.astro';
---
<div class="flex flex-col md:flex-row w-full">
  <div class="md:w-2/3 p-4">
    <WheelSection />
    <div id="nameDisplay" class="mt-4 text-center text-2xl font-bold p-4 rounded-lg transition-opacity duration-500 opacity-0">
      <!-- Winner name will appear here -->
    </div>
  </div>
  
  <div class="md:w-1/3 p-4">
    <HistoryList />
  </div>
</div>

<style>
@keyframes spin {
  from {transform: rotate(0deg);}
  to {transform: rotate(360deg);}
}
.spinning {
  animation: spin 2s ease-out;
}
</style>

<script>
  // Import canvas-confetti using dynamic import
  let confetti;
  import('canvas-confetti').then(module => {
    confetti = module.default;
  });

  const friends = ["A","B","C", "D","E","F","G"];
  const giftHistory = [];
  let spinning = false;
  let firstGifter = null;
  let currentGifter = null;
  let wheelCanvas, wheelCtx;
  let rotationAngle = 0;
  let animationId = null;

  // Generate pastel colors for the wheel
  const generatePastelColors = (count: number) => {
    const colors: string[] = [];
    for (let i = 0; i < count; i++) {
      const hue = (i * (360 / count)) % 360;
      colors.push(`hsl(${hue}, 70%, 85%)`);
    }
    return colors;
  };

  // Colors will be generated dynamically based on number of friends
  let colors: string[] = [];

  const drawWheel = () => {
    if (!wheelCanvas) return;
    
    const numSegments = friends.length;
    if (numSegments === 0) return;
    
    // Regenerate colors when needed
    if (colors.length !== numSegments) {
      colors = generatePastelColors(numSegments);
    }
    
    const centerX = wheelCanvas.width / 2;
    const centerY = wheelCanvas.height / 2;
    const radius = Math.min(centerX, centerY) - 10;
    const angleSlice = (2 * Math.PI) / numSegments;

    // Clear canvas
    wheelCtx.clearRect(0, 0, wheelCanvas.width, wheelCanvas.height);
    
    // Draw wheel background
    wheelCtx.save();
    wheelCtx.translate(centerX, centerY);
    wheelCtx.rotate(rotationAngle);
    
    // Draw segments
    for (let i = 0; i < numSegments; i++) {
      const startAngle = i * angleSlice;
      const endAngle = (i + 1) * angleSlice;
      
      // Draw segment
      wheelCtx.beginPath();
      wheelCtx.moveTo(0, 0);
      wheelCtx.arc(0, 0, radius, startAngle, endAngle);
      wheelCtx.closePath();
      wheelCtx.fillStyle = colors[i];
      wheelCtx.fill();
      wheelCtx.strokeStyle = '#ffffff';
      wheelCtx.lineWidth = 2;
      wheelCtx.stroke();
      
      // Draw name
      wheelCtx.save();
      wheelCtx.rotate(startAngle + angleSlice / 2);
      wheelCtx.textAlign = 'right';
      wheelCtx.fillStyle = '#333333';
      wheelCtx.font = 'bold 16px Arial';
      wheelCtx.fillText(friends[i], radius - 20, 5);
      wheelCtx.restore();
    }
    
    // Draw center circle with gradient
    const gradient = wheelCtx.createRadialGradient(0, 0, 0, 0, 0, 20);
    gradient.addColorStop(0, '#ffffff');
    gradient.addColorStop(1, '#f0f0f0');
    
    wheelCtx.beginPath();
    wheelCtx.arc(0, 0, 20, 0, 2 * Math.PI);
    wheelCtx.fillStyle = gradient;
    wheelCtx.fill();
    wheelCtx.strokeStyle = '#cccccc';
    wheelCtx.lineWidth = 1;
    wheelCtx.stroke();
    
    wheelCtx.restore();
    
    // Draw pointer
    wheelCtx.beginPath();
    wheelCtx.moveTo(centerX + radius, centerY);
    wheelCtx.lineTo(centerX + radius + 20, centerY - 10);
    wheelCtx.lineTo(centerX + radius + 20, centerY + 10);
    wheelCtx.closePath();
    wheelCtx.fillStyle = '#ff6b6b';
    wheelCtx.fill();
  };

  const updateFriendsFromTextarea = () => {
    const friendsTextarea = document.getElementById("friendsTextarea");
    const friendNames = friendsTextarea.value
      .split('\n')
      .map(name => name.trim())
      .filter(name => name !== '');
    
    // Clear the current friends list
    friends.length = 0;
    
    // Add unique names only
    for (const name of friendNames) {
      if (!friends.includes(name)) {
        friends.push(name);
      }
    }
    
    updateFriendsList();
    drawWheel();
  };

  const removeFriend = (index) => {
    friends.splice(index, 1);
    
    // Update the textarea to reflect the changes
    const friendsTextarea = document.getElementById("friendsTextarea");
    friendsTextarea.value = friends.join('\n');
    
    updateFriendsList();
    drawWheel();
  };

  const updateFriendsList = () => {
    const friendsList = document.getElementById("friendsList");
    if (!friendsList) return; // Add null check to prevent error
    
    friendsList.innerHTML = "";
    
    for (const [index, friend] of friends.entries()) {
      const listItem = document.createElement("li");
      listItem.classList.add("flex", "justify-between", "items-center", "py-1", "border-b", "border-gray-200", "last:border-b-0");
      listItem.textContent = friend;
      const removeButton = document.createElement("button");
      removeButton.classList.add("text-red-600", "text-xs", "ml-2");
      removeButton.textContent = "x";
      removeButton.onclick = () => removeFriend(index);
      listItem.appendChild(removeButton);
      friendsList.appendChild(listItem);
    }
  };

  const spinWheel = () => {
    if (spinning || friends.length === 0) return;
    spinning = true;
    
    // Cancel any existing animation
    if (animationId) {
      cancelAnimationFrame(animationId);
    }
    
    // Random number of full rotations (5-10) plus the random position
    const rand = Math.floor(Math.random() * friends.length);
    const angleSlice = (2 * Math.PI) / friends.length;
    
    // Calculate target rotation so the selected segment is aligned with the pointer (at 0 degrees)
    // The pointer is at the 3 o'clock position (0 degrees in the unit circle)
    // We need to add 90 degrees (Ï€/2) to align with the pointer
    const targetRotation = -((rand * angleSlice) + (angleSlice / 2)) + Math.PI/2;
    
    // Add multiple full rotations for spinning effect
    const totalRotations = 5 + Math.random() * 5; // Random between 5-10 rotations
    const targetAngle = rotationAngle - (2 * Math.PI * totalRotations) + targetRotation;
    
    const startAngle = rotationAngle;
    const spinDuration = 4000; // 4 seconds
    const startTime = performance.now();

    console.log({rand,angleSlice, targetRotation,totalRotations,targetAngle,startAngle,spinDuration,startTime})
    const animateSpin = (currentTime) => {
      const elapsed = currentTime - startTime;
      const progress = Math.min(elapsed / spinDuration, 1);
      
      // Easing function for smoother deceleration
      const easeOut = 1 - Math.pow(1 - progress, 4); // Changed power to 4 for more dramatic slowdown
      
      rotationAngle = startAngle + (targetAngle - startAngle) * easeOut;
      drawWheel();
      
      if (progress < 1) {
        animationId = requestAnimationFrame(animateSpin);
      } else {
        // Normalize rotation angle
        rotationAngle = rotationAngle % (2 * Math.PI);
        drawWheel();
        showWinner(rand);
        spinning = false;
        
        // Trigger confetti
        if (confetti) {
          confetti({
            particleCount: 100,
            spread: 70,
            origin: { y: 0.6 }
          });
        }
      }
    };
    
    animationId = requestAnimationFrame(animateSpin);
  };

  const showWinner = (winnerIndex) => {
    const winnerName = friends[winnerIndex];
    displayWinnerName(winnerName);
    processWinner(winnerIndex);
  };

  const displayWinnerName = (name) => {
    const nameDisplay = document.getElementById("nameDisplay");
    const pastelColor = getRandomPastelColor();
    nameDisplay.style.backgroundColor = pastelColor;
    nameDisplay.textContent = name;
    nameDisplay.classList.remove("opacity-0");
    nameDisplay.classList.add("opacity-100");
    setTimeout(() => {
      nameDisplay.classList.remove("opacity-100");
      nameDisplay.classList.add("opacity-0");
    }, 1500);
  };

  const processWinner = (index) => {
    const name = friends[index];
    if (currentGifter === null) {
      firstGifter = name;
      currentGifter = name;
      friends.splice(index, 1);
      updateFriendsList();
      drawWheel();
    } else {
      const receiverName = name;
      giftHistory.push({ gifter: currentGifter, receiver: receiverName });
      updateGiftHistory();
      friends.splice(index, 1);
      if (friends.length === 0) {
        giftHistory.push({ gifter: receiverName, receiver: firstGifter });
        updateGiftHistory();
        currentGifter = null;
      } else {
        currentGifter = receiverName;
      }
      updateFriendsList();
      drawWheel();

      setTimeout(() => {
        const nameDisplay = document.getElementById("nameDisplay");
        nameDisplay.textContent = "";
        nameDisplay.style.backgroundColor = "";
      }, 2000);
    }
  };

  const updateGiftHistory = () => {
    const historyList = document.getElementById("giftHistory");
    if (!historyList) return; // Add null check to prevent error
    
    historyList.innerHTML = "";
    
    for (const item of giftHistory) {
      const historyItem = document.createElement("li");
      historyItem.classList.add("py-1", "border-b", "border-gray-200", "last:border-b-0");
      historyItem.textContent = `${item.gifter} gave to ${item.receiver}`;
      historyList.appendChild(historyItem);
    }
  };

  const getRandomPastelColor = () => {
    const h = 360 * Math.random();
    const s = 25 + 70 * Math.random() + "%";
    const l = 75 + 10 * Math.random() + "%";
    return `hsl(${h},${s},${l})`;
  };

  document.addEventListener('DOMContentLoaded', () => {
    // Initialize canvas
    const wheelContainer = document.getElementById("wheel");
    if (wheelContainer) {
      // Replace the wheel div with a canvas element
      wheelCanvas = document.createElement("canvas");
      wheelCanvas.id = "wheelCanvas";
      wheelCanvas.width = 600;  // Increased from 300 to 600
      wheelCanvas.height = 600; // Increased from 300 to 600
      wheelCanvas.classList.add("mx-auto");
      
      // Replace the original wheel element with our canvas
      wheelContainer.parentNode.replaceChild(wheelCanvas, wheelContainer);
      
      // Get the drawing context
      wheelCtx = wheelCanvas.getContext("2d");
      
      // Initial draw
      drawWheel();
      
      // Make the canvas clickable for spinning
      wheelCanvas.addEventListener("click", spinWheel);
    }
    
    const spinButton = document.getElementById("spinButton");
    if (spinButton) {
      spinButton.addEventListener("click", spinWheel);
    }
    
    // Add event listener for textarea
    const friendsTextarea = document.getElementById("friendsTextarea");
    if (friendsTextarea) {
      friendsTextarea.addEventListener("input", updateFriendsFromTextarea);
    }
    
    updateFriendsList();
  });
</script>
